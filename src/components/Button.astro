---
const { type = "button",
        size = "md",
        isFilled,
        theme = 'light',
        classes,
        ...rest
      } = Astro.props;

const background = `var(--${theme})`;
const foreground = theme === 'light' ? 'var(--primary)' : 'var(--light)';
---

<!-- things we might want in a button -->
<!-- 1. type: button | submit -->
<!-- 2. size: sm, md, lg -->
<!-- 3. theme: colorTheme -->
<!-- 4. isFilled? -->
<!-- 5. classes : button attr -->

<button class:list={[ classes, { filled: isFilled } ]} 
        {type} 
        data-size={size}
        {...rest}>
    <slot />
</button>

<style define:vars={{
    background,
    foreground
}}>
    button {
        font-family: inherit;
        cursor: pointer;

        --bcg: var(--background); 
        --clr: var(--foreground); 

        background-color: var(--light);
        color: var(--bcg);
        
        border: .2em solid var(--bcg);
        padding: .4em 1.25em;

        transition: box-shadow 0.2s cubic-bezier(0.075, 0.82, 0.165, 1),
                    opacity 0.2s cubic-bezier(0.075, 0.82, 0.165, 1),
                    scale 0.2s cubic-bezier(0.075, 0.82, 0.165, 1);
    }
    
    button.filled {
        background-color: var(--bcg);
        border: none;
        color: var(--clr);
    }

    button:focus {
        outline-color: transparent;
    }

    button:hover {
        opacity: 0.8;
        scale: 1.05;
    }

    button:focus-visible {
        box-shadow: 0 0 0 0.1em var(--light), 0 0 0 0.3em var(--bcg);
    }

    [data-size="sm"] {
        font-size: .8rem;
    } 
    [data-size="md"] {
        font-size: 1.1rem;
    } 
    [data-size="lg"] {
        font-size: 1.5rem;
    } 
</style>